from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from prophet import Prophet
import pandas as pd

app = FastAPI()

# Allow requests from anywhere
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # any origin
    allow_credentials=True,
    allow_methods=["*"],  # <-- allow POST, OPTIONS, etc.
    allow_headers=["*"],  # <-- allow Content-Type
)

class PriceInput(BaseModel):
    prices:list[float]

@app.post("/predict")
def predict(price_input: PriceInput):
    #prices = [118384.92193419846,118185.47472943665,118451.62072881311,118213.36966862573,118303.92136200068,118019.83988133041,117975.7857182899,117800.3890012445,117659.9232573146,117744.57938981004,117792.21371595125,118004.76868885547,117519.35606632655,117293.77662722742,116457.32687457414,115762.72294417131,115355.15362701363,115582.39765044459,115677.2437142178,115295.02327023851,115338.9847735173,115197.40503646056,115074.7800568399,115124.87334587987,115044.56004926866,115527.0309311352,114995.26995245655,115648.19465225624,116256.12045700087,116083.85779306894,116717.50032215302,116612.61591671837,116359.64918942218,116467.14070857807,116713.43762065737,116445.12054707026,116315.1187900144,116578.69611080748,115840.82295104749,115739.41713066881,114853.79567274198,115310.22932577619,115021.97815753656,114985.89568101108,115011.33437220617,115244.10458929573,115371.1864707095,115429.16618470901,115559.44716650811,115599.61514159056,115239.4878544111,114004.88666207601,113820.33698581933,113404.06193584246,113494.55052097653,112832.75554814276,113271.63940944368,113497.50086327353,113414.51430137384,113170.10811534988,112896.32534645073,113221.30878378011,113038.63562802887,113436.86955390326,113499.88101366491,113576.63342572509,113712.34453532855,113616.7780659848,113548.32584815667,113979.37893099306,113738.87260459366,113814.60747522612,113772.5953048606,113704.65095237858,112721.52528522459,113468.71586206947,113364.1275536759,113947.58727837629,114200.26919279918,113588.02274704837,114227.65280595022,114351.92452461013,114422.93252401563,114590.45445269886,114250.43172587751,114337.7268829338,114723.4072135875,113987.89517975388,113987.13392915655,113808.26421295329,113954.38733064673,113737.02812154038,113890.13604780457,113638.22918676953,113396.1776883503,113373.80279295826,113132.28582905016,112952.51362584245,113504.91074576437,113266.26639577647,112773.38343187496,112398.3636645793,112379.88592699269,112571.655424373,112023.06158201321,112564.21553111593,112561.18367557136,112468.84756023913,112414.39987336512,112570.05901657068,112817.82613496445,113266.61693979731,112933.12517331423,112787.89866622085,113216.10154703319,112999.09282659138,113108.75506378774,112993.43834510577,113074.45957010616,112521.5479279412,112288.33375620782,112360.04916226704,112497.07530672899,115949.64822768302,116733.62955688963,116242.77576562841,116925.15114552547,116754.18597018225,116630.95770630019,116893.16140783997,117016.4148378404,116690.82991354102,116897.54178212964,116840.2881931396,116431.22818366549,115820.56605227095,115506.45234208381,115836.07441882673,115916.12989192463,115686.06492737045,115756.2715219422,115734.99631164433,115693.18189345239,115518.50378351717,115274.0388844848,115135.13762173562,114821.41680903742,114686.33732965987,114783.2566749885,114971.81358538911,115025.4752987663,115092.92711799828,115099.37297567134,115226.72980830548,115167.53577999982,115280.20647376521,115359.98346714744,115363.99729235176,115431.1805844341,115069.43066346603,114993.24273069265,115086.60114191737,114953.03010212432,114844.61849424148,114879.69078631983,114753.3400146967,114823.03309844933,114736.45359290068]
    prices = price_input.prices

    #check null
    if not prices:
        return {"predictions": []}

    #`prices` is a list of 7*24 hourly prices (past 7 days)
    df = pd.DataFrame({
        'ds': pd.date_range(end=pd.Timestamp.now(), periods=len(prices), freq='H'),
        'y': prices
    })

    model = Prophet()
    model.fit(df)

    future = model.make_future_dataframe(periods=24, freq='H')
    forecast = model.predict(future)

    # send back the forecasted part
    next_day = forecast.tail(24)

    predicted_prices = next_day['yhat'].tolist()

    return {"predictions": predicted_prices}